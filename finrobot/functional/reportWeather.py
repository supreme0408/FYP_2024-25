import os
import traceback
from reportlab.lib import colors, pagesizes
from reportlab.platypus import (
    SimpleDocTemplate, Frame, Paragraph, Image, PageTemplate, FrameBreak,
    Spacer, Table, TableStyle, NextPageTemplate, PageBreak
)
from reportlab.lib.units import inch
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
from typing import Annotated


class ReportWeatherLabUtils:
    def save_generated_report(
        text: Annotated[str, "Text generated by the Weather Analyst containing weather analysis and crop recommendations. And all conversation data."],
        save_path: Annotated[str, "Folder Path where the text file will be saved."]
    ) -> None:
        """
        Saves the generated weather analysis report as a .txt file in the specified location.
        Args: text (str): The weather analysis and crop prediction report text.
        save_path (str): The file path where the report should be saved.
        Returns:
        None
        """
        try:
            with open(save_path, "w", encoding="utf-8") as file:
                file.write(text)
            print(f"Report successfully saved at: {save_path}")
        except Exception as e:
            print(f"Error saving report: {e}")
        
    def build_weather_analysis_report(
        location: Annotated[str, "Geographical location for the weather analysis"],
        save_path: Annotated[str, "Folder Path to save the weather analysis PDF"],
        rainfall_data: Annotated[
            str, 
            "Summary of rainfall sum variations over the analyzed period."
        ],
        temperature_trends: Annotated[
            str, 
            "Summary of temperature variations over the analyzed period."
        ],
        precipitation_analysis: Annotated[
            str, 
            "Analysis of rainfall patterns, heavy precipitation periods, and trends"
        ],
        humidity_levels: Annotated[
            str, 
            "Humidity variations over the analyzed period and their implications"
        ],
        extreme_events: Annotated[
            str, 
            "Occurrences of extreme weather events like storms, heatwaves, or floods"
        ],
        generated_insights: Annotated[
    str, 
    """Comprehensive reasoning and analysis generated by the AI agent based on historical and current weather data, focusing on rainfall and temperature trends. The AI agent will evaluate seasonal patterns, drought or flood risks, and temperature fluctuations to determine their impact on agriculture.  

    The analysis includes:  
    - **Rainfall Trends**: Identifying periods of surplus or deficit rainfall and their effects on soil moisture and irrigation needs.  
    - **Temperature Analysis**: Assessing temperature variations, frost risks, and heat waves, which influence crop growth cycles.  
    - **Crop Suitability**: Suggesting suitable crops for the region based on weather conditions and water requirements.  
    - **Crop Growth Requirements**: Providing details on the recommended crops, including ideal temperature ranges and irrigation needs to ensure healthy growth.  
    - **Predictive Insights**: Forecasting potential agricultural challenges such as delayed monsoons, heat stress, or excessive moisture and offering adaptive strategies for farmers.  

    This insight will be structured in paragraphs, making it suitable for inclusion in a weather analysis report."""
],
        analysis_date: Annotated[str, "Date when the weather analysis was performed"]
    ) -> str:
        """
        Generates a comprehensive weather analysis report in PDF format,
        compiling key weather trends, extreme event records, and AI-driven insights. Based on the data stored in the working directory, it creates a structured report with sections for rainfall, temperature, humidity, and extreme events. The report is saved in the specified path.
        The report also includes generated insights and conversation between agents. Based on the weather data, providing a deeper understanding of the weather patterns and their implications for agriculture.
        """
        try:
            # Setup PDF page properties
            page_width, page_height = pagesizes.A4
            margin = 4

            # Define PDF output path
            pdf_path = os.path.join(save_path, f"{location}_Weather_Analysis_Report.pdf")
            os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
            doc = SimpleDocTemplate(pdf_path, pagesize=pagesizes.A4)

            # Define frames for layout
            frame_left = Frame(margin, margin, page_width * 2 / 3 - margin * 2, page_height - margin * 2, id="left")
            frame_right = Frame(page_width * 2 / 3, margin, page_width / 3 - margin * 2, page_height - margin * 2, id="right")

            single_frame = Frame(margin, margin, page_width - margin * 2, page_height - margin * 2, id="single")

            page_template = PageTemplate(id="TwoColumns", frames=[frame_left, frame_right])
            single_column_layout = PageTemplate(id="OneCol", frames=[single_frame])
            doc.addPageTemplates([page_template, single_column_layout])

            # Define styles
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(name="Title", parent=styles["Title"], fontName="Helvetica-Bold", fontSize=16, leading=20, alignment=TA_LEFT, spaceAfter=10)
            subtitle_style = ParagraphStyle(name="Subtitle", parent=styles["Heading2"], fontName="Helvetica-Bold", fontSize=14, leading=12, alignment=TA_LEFT, spaceAfter=6)
            body_style = ParagraphStyle(name="Body", parent=styles["Normal"], fontName="Helvetica", fontSize=10, alignment=TA_JUSTIFY)

            # Content for PDF
            content = []
            content.append(Paragraph(f"Weather Analysis Report: {location}", title_style))
            content.append(Paragraph(f"Analysis Date: {analysis_date}", body_style))

            # Extreme Events
            content.append(Paragraph("Extreme Weather Events", subtitle_style))
            content.append(Paragraph(extreme_events, body_style))

            # AI-Generated Insights
            content.append(NextPageTemplate("OneCol"))
            content.append(PageBreak())
            content.append(Paragraph("AI-Generated Insights", subtitle_style))
            content.append(Paragraph(generated_insights, body_style))

            # Generate PDF
            doc.build(content)
            return f"Weather Analysis Report generated successfully: {pdf_path}"

        except Exception:
            return traceback.format_exc()
