import os
import traceback
import csv
from reportlab.lib import colors, pagesizes
from reportlab.platypus import (
    SimpleDocTemplate, Frame, Paragraph, Image, PageTemplate, FrameBreak,
    Spacer, Table, TableStyle, NextPageTemplate, PageBreak, Flowable
)
from reportlab.lib.units import inch, cm
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT, TA_RIGHT
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from typing import Annotated
from ..data_source.WeatherAnalysisInsights import WeatherAnalysisInsights


# Custom flowable for horizontal lines
class HorizontalLine(Flowable):
    def __init__(self, width, thickness=1, color=colors.black, space_before=0, space_after=0):
        Flowable.__init__(self)
        self.width = width
        self.thickness = thickness
        self.color = color
        self.space_before = space_before
        self.space_after = space_after

    def wrap(self, *args):
        return (self.width, self.thickness + self.space_before + self.space_after)

    def draw(self):
        self.canv.setStrokeColor(self.color)
        self.canv.setLineWidth(self.thickness)
        y = self.space_before + self.thickness/2
        self.canv.line(0, y, self.width, y)


class ReportWeatherLabUtils:
    def save_generated_report(
        location: Annotated[str, "Geographical location for the weather analysis"],
        text: Annotated[str, "Text generated by the Weather Analyst containing weather analysis, crop recommendations and all reasoning data."],
        save_path: Annotated[str, "Folder Path where the text file will be saved."]
    ) -> None:
        """
        Saves the generated weather analysis report as a .txt file in the specified location.
        """
        textfile_path = os.path.join(save_path, f"{location}_Weather_Analysis_Report.txt")
        os.makedirs(os.path.dirname(textfile_path), exist_ok=True)
        try:
            with open(textfile_path, "w", encoding="utf-8") as file:
                file.write(text)
            print(f"Report successfully saved at: {textfile_path}")
        except Exception as e:
            print(f"Error saving report: {e}")
        
    def build_weather_analysis_report(
        location: Annotated[str, "Geographical location for the weather analysis"],
        save_path: Annotated[str, "Folder Path to save the weather analysis PDF"],
        text: Annotated[str, "Structured summary of Text generated by the Weather Analyst containing weather analysis and crop recommendations."],
        year: Annotated[str, "Year when the weather analysis was performed"]
    ) -> str:
        """
        Aggregates rainfall data summary, temperature trend summary, precipitation analysis, comprehensive reasoning 
        and analysis of weather and prediction of crop suitability into a PDF report.
        """
        try:
            # Setup PDF page properties
            page_width, page_height = pagesizes.A4
            margin = 0.75 * inch  # Professional margin

            # Define PDF output path
            pdf_path = os.path.join(save_path, f"{location}_Weather_Analysis_Report.pdf")
            os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
            
            # Create document with custom page setup
            doc = SimpleDocTemplate(
                pdf_path, 
                pagesize=pagesizes.A4,
                rightMargin=margin,
                leftMargin=margin,
                topMargin=margin,
                bottomMargin=margin,
                title=f"Weather Analysis Report: {location}",
                author="Weather Analysis System"
            )

            # Add a header and footer to each page
            def header_footer(canvas, doc):
                canvas.saveState()
                
                # Header with light blue background
                canvas.setFillColor(colors.lightblue)
                canvas.rect(margin, page_height - 1.5*inch, page_width - 2*margin, inch, fill=1, stroke=0)
                
                # Title text in header
                canvas.setFillColor(colors.white)
                canvas.setFont('Times-Bold', 16)
                canvas.drawString(margin + 0.1*inch, page_height - 0.85*inch, f"Weather Analysis Report: {location}")
                
                # Year subtitle
                canvas.setFont('Times-Italic', 12)
                canvas.drawString(margin + 0.1*inch, page_height - 1.2*inch, f"Analysis Year: {year}")
                
                # Footer with line and page number
                canvas.setStrokeColor(colors.lightblue)
                canvas.setLineWidth(2)
                canvas.line(margin, 0.75*inch, page_width - margin, 0.75*inch)
                
                canvas.setFillColor(colors.darkblue)
                canvas.setFont('Times-Roman', 9)
                canvas.drawString(margin, 0.5*inch, "Generated by Weather Analysis System")
                
                # Page number
                page_num = canvas.getPageNumber()
                canvas.drawRightString(page_width - margin, 0.5*inch, f"Page {page_num}")
                
                canvas.restoreState()

            # Define single-column layout
            single_frame = Frame(
                margin,                      # x
                margin,                      # y
                page_width - 2 * margin,     # width
                page_height - 2.5 * inch,    # height (account for header)
                id="SingleColumn",
                leftPadding=0,
                rightPadding=0,
                bottomPadding=0,
                topPadding=0,
            )
            
            # Apply the layout
            single_column_layout = PageTemplate(
                id="OneCol", 
                frames=[single_frame],
                onPage=header_footer
            )
            doc.addPageTemplates([single_column_layout])

            # Define styles with Times New Roman
            styles = getSampleStyleSheet()
            
            title_style = ParagraphStyle(
                name="Title", 
                parent=styles["Title"], 
                fontName="Times-Bold", 
                fontSize=18, 
                leading=22, 
                alignment=TA_LEFT, 
                spaceAfter=12,
                textColor=colors.darkblue
            )
            
            subtitle_style = ParagraphStyle(
                name="Subtitle", 
                parent=styles["Heading2"], 
                fontName="Times-Bold", 
                fontSize=14, 
                leading=16, 
                alignment=TA_LEFT, 
                spaceAfter=8,
                spaceBefore=16,
                textColor=colors.darkblue,
                borderPadding=(0, 0, 0, 4),
                borderWidth=0,
                borderColor=colors.lightblue,
                borderRadius=None
            )
            
            body_style = ParagraphStyle(
                name="Body", 
                parent=styles["Normal"], 
                fontName="Times-Roman", 
                fontSize=11, 
                leading=14, 
                alignment=TA_JUSTIFY,
                spaceBefore=4
            )
            
            # Custom table styles
            table_title_style = ParagraphStyle(
                name="TableTitle",
                parent=styles["Normal"],
                fontName="Times-Bold",
                fontSize=12,
                leading=14,
                alignment=TA_LEFT,
                spaceBefore=12,
                spaceAfter=6,
                textColor=colors.darkblue
            )
            
            # Content for PDF - skip header since we have a custom one
            content = [Spacer(1, 0.5*inch)]  # Space after header
            
            # Introduction
            content.append(Paragraph("Executive Summary", subtitle_style))
            content.append(Paragraph(text, body_style))
            content.append(Spacer(1, 0.2*inch))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 6, 6))

            # Rainfall Data
            content.append(Paragraph("Rainfall Data Summary", subtitle_style))
            rainfall_filename = f"rainfall_{location.replace(' ', '_')}_{year}.csv"
            rainfall_csv_path = os.path.join(save_path, rainfall_filename)
            
            with open(rainfall_csv_path, 'r') as file:
                reader = csv.reader(file)
                rainfall_data = [row for row in reader]
            
            # Enhanced table styles
            rainfall_table = Table(
                rainfall_data,
                repeatRows=1,
                spaceBefore=6,
                spaceAfter=12,
            )
            
            # Professional table style
            rainfall_style = TableStyle([
                # Header styling
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Times-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 11),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                ('TOPPADDING', (0, 0), (-1, 0), 8),
                
                # Body styling
                ('ALIGN', (0, 1), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 1), (-1, -1), 'Times-Roman'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                
                # Alternating row colors for readability
                ('BACKGROUND', (0, 1), (-1, -1), colors.whitesmoke),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
                
                # Rounded corners for the entire table
                ('ROUNDEDCORNERS', [10, 10, 10, 10]),
            ])
            
            rainfall_table.setStyle(rainfall_style)
            content.append(rainfall_table)
            content.append(Spacer(1, 0.2*inch))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 6, 6))

            # Temperature Data
            content.append(Paragraph("Temperature Data Summary", subtitle_style))
            temperature_filename = f"temperature_{location.replace(' ', '_')}_{year}.csv"
            temperature_csv_path = os.path.join(save_path, temperature_filename)
            
            with open(temperature_csv_path, 'r') as file:
                reader = csv.reader(file)
                temp_data = [row for row in reader]
            
            # Create temperature table with the same professional style
            temperature_table = Table(
                temp_data,
                repeatRows=1,
                spaceBefore=6,
                spaceAfter=12,
            )
            temperature_table.setStyle(rainfall_style)  # Reuse the same style for consistency
            content.append(temperature_table)

            # Generate PDF
            doc.build(content)
            return f"Weather Analysis Report generated successfully: {pdf_path}"

        except Exception:
            return traceback.format_exc()

    def build_structured_analysis_report(
        location: Annotated[str, "Geographical location for the weather analysis"],
        save_path: Annotated[str, "Folder Path to save the weather analysis PDF"],
        analysis: Annotated[WeatherAnalysisInsights, "Structured insights on rainfall, temperature, crop suitability, and predictions"],
        year: Annotated[str, "Year when the weather analysis was performed"]
    ) -> str:
        """
        Aggregates rainfall data summary, temperature trend summary, precipitation analysis,
        comprehensive reasoning and analysis of weather, and prediction of crop suitability into a PDF report.
        """
        try:
            # Setup PDF page properties
            page_width, page_height = pagesizes.A4
            margin = 0.75 * inch  # Professional margin
    
            # Define PDF output path
            pdf_path = os.path.join(save_path, f"{location}_Weather_Analysis_Report.pdf")
            os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
            
            # Create document with custom page setup
            doc = SimpleDocTemplate(
                pdf_path, 
                pagesize=pagesizes.A4,
                rightMargin=margin,
                leftMargin=margin,
                topMargin=margin,
                bottomMargin=margin,
                title=f"Weather Analysis Report: {location}",
                author="Weather Analysis System"
            )

            # Add a header and footer to each page
            def header_footer(canvas, doc):
                canvas.saveState()
                
                # Header with gradient-like effect using multiple rectangles
                colors_gradient = [colors.Color(0, 0.4, 0.8, alpha=0.8), colors.Color(0, 0.5, 0.9, alpha=0.7)]
                for i, color in enumerate(colors_gradient):
                    height_offset = i * 0.4 * inch
                    canvas.setFillColor(color)
                    canvas.rect(margin, page_height - (1.5*inch - height_offset), 
                                page_width - 2*margin, (1-i*0.2)*inch, fill=1, stroke=0)
                
                # Title text in header
                canvas.setFillColor(colors.white)
                canvas.setFont('Times-Bold', 18)
                canvas.drawString(margin + 0.1*inch, page_height - 0.85*inch, f"Weather Analysis Report")
                
                # Location subtitle
                canvas.setFont('Times-Bold', 14)
                canvas.drawString(margin + 0.1*inch, page_height - 1.2*inch, f"{location}")
                
                # Year subtitle
                canvas.setFont('Times-Italic', 12)
                canvas.drawRightString(page_width - margin - 0.1*inch, page_height - 1.2*inch, f"Analysis Year: {year}")
                
                # Footer with line and page number
                canvas.setStrokeColor(colors.Color(0, 0.4, 0.8, alpha=0.8))
                canvas.setLineWidth(2)
                canvas.line(margin, 0.75*inch, page_width - margin, 0.75*inch)
                
                canvas.setFillColor(colors.darkblue)
                canvas.setFont('Times-Roman', 9)
                canvas.drawString(margin, 0.5*inch, "Generated by Weather Analysis System")
                
                # Page number
                page_num = canvas.getPageNumber()
                canvas.drawRightString(page_width - margin, 0.5*inch, f"Page {page_num}")
                
                canvas.restoreState()

            # Define single-column layout
            single_frame = Frame(
                margin,                      # x
                margin,                      # y
                page_width - 2 * margin,     # width
                page_height - 2.5 * inch,    # height (account for header)
                id="SingleColumn",
                leftPadding=0,
                rightPadding=0,
                bottomPadding=0,
                topPadding=0,
            )
            
            # Apply the layout
            single_column_layout = PageTemplate(
                id="OneCol", 
                frames=[single_frame],
                onPage=header_footer
            )
            doc.addPageTemplates([single_column_layout])
    
            # Define styles with Times New Roman
            styles = getSampleStyleSheet()
            
            title_style = ParagraphStyle(
                name="Title", 
                parent=styles["Title"], 
                fontName="Times-Bold", 
                fontSize=18, 
                leading=22, 
                alignment=TA_LEFT, 
                spaceAfter=12,
                textColor=colors.darkblue
            )
            
            subtitle_style = ParagraphStyle(
                name="Subtitle", 
                parent=styles["Heading2"], 
                fontName="Times-Bold", 
                fontSize=14, 
                leading=16, 
                alignment=TA_LEFT, 
                spaceAfter=8,
                spaceBefore=16,
                textColor=colors.darkblue
            )
            
            body_style = ParagraphStyle(
                name="Body", 
                parent=styles["Normal"], 
                fontName="Times-Roman", 
                fontSize=11, 
                leading=14, 
                alignment=TA_JUSTIFY,
                spaceBefore=4
            )
            
            # Content for PDF - skip header since we have a custom one
            content = [Spacer(1, 0.5*inch)]  # Space after header
    
            # Insert structured analysis sections with improved formatting
            content.append(Paragraph("Analysis of Rainfall Trends", subtitle_style))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 0, 6))
            content.append(Paragraph(analysis.Analysis_of_Rainfall_Trends, body_style))
            content.append(Spacer(1, 0.2*inch))
            
            content.append(Paragraph("Analysis of Temperature", subtitle_style))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 0, 6))
            content.append(Paragraph(analysis.Analysis_of_Temperature, body_style))
            content.append(Spacer(1, 0.2*inch))
            
            content.append(Paragraph("Crop Suitability & Growth Requirements", subtitle_style))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 0, 6))
            content.append(Paragraph(analysis.Crop_Suitability_and_Crop_Growth_Requirements, body_style))
            content.append(Spacer(1, 0.2*inch))
            
            content.append(Paragraph("Predictive Insights of Weather", subtitle_style))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 0, 6))
            content.append(Paragraph(analysis.Predictive_Insights_of_weather, body_style))
            content.append(Spacer(1, 0.3*inch))

            content.append(PageBreak())
    
            # Rainfall Table with improved formatting
            content.append(Paragraph("Rainfall Data Summary", subtitle_style))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 0, 6))
            content.append(Spacer(1, 0.1*inch))
            
            rainfall_filename = f"rainfall_{location.replace(' ', '_')}_{year}.csv"
            rainfall_csv_path = os.path.join(save_path, rainfall_filename)
            if os.path.exists(rainfall_csv_path):
                with open(rainfall_csv_path, 'r') as file:
                    reader = csv.reader(file)
                    rainfall_data = [row for row in reader]
                    
                rainfall_table = Table(
                    rainfall_data,
                    repeatRows=1,
                    spaceBefore=6,
                    spaceAfter=12,
                )
                
                rainfall_style = TableStyle([
                    # Header styling
                    ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Times-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 11),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
                    ('TOPPADDING', (0, 0), (-1, 0), 8),
                    
                    # Body styling
                    ('ALIGN', (0, 1), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 1), (-1, -1), 'Times-Roman'),
                    ('FONTSIZE', (0, 1), (-1, -1), 10),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    
                    # Alternating row colors for readability
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
                    
                    # Rounded corners for the entire table
                    ('ROUNDEDCORNERS', [10, 10, 10, 10]),
                ])
                
                rainfall_table.setStyle(rainfall_style)
                content.append(rainfall_table)
                content.append(Spacer(1, 0.2*inch))
    
            # Temperature Table with matching style
            content.append(Paragraph("Temperature Data Summary", subtitle_style))
            content.append(HorizontalLine(page_width - 2*margin, 1, colors.lightblue, 0, 6))
            content.append(Spacer(1, 0.1*inch))
            
            temperature_filename = f"temperature_{location.replace(' ', '_')}_{year}.csv"
            temperature_csv_path = os.path.join(save_path, temperature_filename)
            if os.path.exists(temperature_csv_path):
                with open(temperature_csv_path, 'r') as file:
                    reader = csv.reader(file)
                    temp_data = [row for row in reader]
                    
                temperature_table = Table(
                    temp_data,
                    repeatRows=1,
                    spaceBefore=6,
                    spaceAfter=12,
                )
                # Reuse the same style for consistency
                temperature_table.setStyle(rainfall_style)
                content.append(temperature_table)
    
            # Build the PDF
            doc.build(content)
            return f"Weather Analysis Report generated successfully: {pdf_path}"
    
        except Exception:
            return traceback.format_exc()